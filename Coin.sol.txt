pragma solidity 0.4.24;

contract Coin {
    // The keyword "public" makes those variables
    // readable from outside.
    
    address public minter; // a getter function shall be automatically provided to us to query its value
    
    mapping (address => uint) public balances; // step 1 - declaration
    // balances[avinash add] = 10; // - using in solidity 
    // balances[vikas add] = 20;
    // balances[murali add] = 30;
    
    // situation : keep track of whether people shook hands:
    // two people = true/false
   
    
    //nested mapping 
    // mapping (address => uint) public balances; - single mapping 
    
    // mapping (address => mapping(address => bool) ) public shookHands; // nested mapping - declaration
    
    // shookHands[AVI][VIK] = true; //- usage

    
    // Events allow light clients to react to
    // changes efficiently.
    event Sent(address indexed from, address indexed to, uint amount); // max 5 parameter, max 3 indexed parameter, you can't have a parameter of array of string
    event CointMinted (address indexed to, uint indexed amount ) ; //can't put indexed in from of string 
    // This is the constructor whose code is
    // run only when the contract is created.
    
    
    /*
    for serving files from http server:
    step 1 : install python
    step 2: python -m http.server
    
    */
    
    // ex - show what can happen if you'll not refresh the page - web3 anomaly
    // ex for learners: 
    // 1. add one more event  & write the filter/watcher for this event. 
    // 2. fetch all events from the smart contract.
    
    // use case : you can use in royalty point distribution.
    // hdfc credit point - 
    // jet privilege points - 
    
    // 28 July
    // demo - create your own token  :
    // name of the token : Blockchain Masterclass
    // supply of the token : 1-000-000-000
    // ticker : BLM
    
    // download the uPORT app and generate your identity.
    
    constructor() public {
        minter = msg.sender;
    }

    function mint(address receiver, uint amount) public {
        if (msg.sender != minter) return; // this function can only be accessed by minter
        balances[receiver] += amount;
        emit CointMinted( receiver, amount);
    }

    function send(address receiver, uint amount) public {
        if (balances[msg.sender] < amount) return;
        balances[msg.sender] -= amount;
        balances[receiver] += amount;
        
        emit Sent(msg.sender, receiver, amount); // logging mechanism - 
    }
    
}